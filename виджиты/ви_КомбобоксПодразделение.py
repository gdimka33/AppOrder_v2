import tkinter as tk
from tkinter import ttk
from справочники import СПРАВОЧНИК_ПОДРАЗДЕЛЕНИЙ

class ВиджетПодразделения(ttk.Combobox):
    """
    Виджет для выбора подразделения из выпадающего списка.
    Отображает все доступные подразделения.
    """
    def __init__(self, родитель, тип_подразделения=None, **kwargs):
        """
        Инициализация виджета выбора подразделения
        
        Args:
            родитель: Родительский виджет
            тип_подразделения: Фильтр по типу подразделения (по умолчанию None - все типы)
            **kwargs: Дополнительные параметры для ttk.Combobox
        """
        # Устанавливаем параметры по умолчанию
        kwargs.setdefault('state', 'readonly')
        kwargs.setdefault('width', 30)
        
        # Получаем значения для выпадающего списка из СПРАВОЧНИК_ПОДРАЗДЕЛЕНИЙ
        if тип_подразделения:
            значения = [p['наименование'] for p in СПРАВОЧНИК_ПОДРАЗДЕЛЕНИЙ if p.get('тип_подразделения_id') == тип_подразделения]
        else:
            значения = [p['наименование'] for p in СПРАВОЧНИК_ПОДРАЗДЕЛЕНИЙ]
        kwargs['values'] = значения
        
        super().__init__(родитель, **kwargs)
        
        # Устанавливаем первое значение по умолчанию, если есть значения
        if значения:
            self.current(0)
        
        # Настраиваем отображение выпадающего списка без прокрутки
        self.bind('<<ComboboxSelected>>', self._обработать_выбор)
        self.bind('<Button-1>', self._настроить_выпадающий_список)
        
        # Сразу настраиваем высоту выпадающего списка
        if значения:
            self.configure(height=len(значения))
    
    def _настроить_выпадающий_список(self, event=None):
        """Настраивает выпадающий список, чтобы он отображался без прокрутки"""
        self.update()
        if not self['values']:
            return
            
        # Получаем количество элементов в списке
        количество_элементов = len(self['values'])
        
        # Ограничиваем высоту выпадающего списка до 10 элементов максимум
        # для более удобной навигации при большом количестве элементов
        высота = min(количество_элементов, 10)
        
        # Устанавливаем высоту выпадающего списка
        self.configure(height=высота)

    def _обработать_выбор(self, event=None):
        """Обрабатывает выбор подразделения из списка"""
        # Можно добавить дополнительную логику при выборе подразделения
        pass
    
    def get_id(self):
        """Возвращает ID выбранного подразделения"""
        текущее_значение = self.get()
        for p in СПРАВОЧНИК_ПОДРАЗДЕЛЕНИЙ:
            if p['наименование'] == текущее_значение:
                return p['id']
        return None
    
    def set_by_id(self, id_подразделения):
        """Устанавливает значение по ID подразделения"""
        for i, p in enumerate(СПРАВОЧНИК_ПОДРАЗДЕЛЕНИЙ):
            if p['id'] == id_подразделения:
                self.current(i)
                return True
        return False

if __name__ == "__main__":
    # Пример использования класса ВиджетПодразделения
    root = tk.Tk()
    root.title("Выбор подразделения")

    # Создаем экземпляр виджета
    виджет = ВиджетПодразделения(root)
    виджет.pack()

    root.mainloop()