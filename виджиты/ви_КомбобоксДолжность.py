import tkinter as tk
from tkinter import ttk
from справочники import СПРАВОЧНИК_ДОЛЖНОСТЕЙ
from logger import logger
import json

class ВиджетДолжности(ttk.Combobox):
    """
    Виджет для выбора должности из выпадающего списка.
    Отображает должности в зависимости от типа сотрудника (офицер/курсант).
    """
    def __init__(self, родитель, тип_сотрудника, **kwargs):
        """
        Инициализация виджета выбора должности
        
        Args:
            родитель: Родительский виджет
            тип_сотрудника: Тип сотрудника ('офицер' или 'курсант')
            **kwargs: Дополнительные параметры для ttk.Combobox
        """
        # Устанавливаем параметры по умолчанию
        kwargs.setdefault('state', 'readonly')
        kwargs.setdefault('width', 30)
        
        # Инициализируем список должностей до создания виджета
        self.тип_сотрудника = тип_сотрудника
        self.должности = self._получить_должности_из_справочника()
        
        # Заполняем значения для выпадающего списка
        значения = [должность[1] for должность in self.должности]
        kwargs['values'] = значения
        
        super().__init__(родитель, **kwargs)
        
        # Настраиваем отображение выпадающего списка без прокрутки
        self.bind('<<ComboboxSelected>>', self._обработать_выбор)
        self.bind('<Button-1>', self._настроить_выпадающий_список)
        
        # Сразу настраиваем высоту выпадающего списка
        if значения:
            высота = min(len(значения), 10)
            self.configure(height=высота)
    
    def _получить_должности_из_справочника(self):
        """Получает должности из справочника в зависимости от типа сотрудника"""
        try:
            результат = []
            for строка in СПРАВОЧНИК_ДОЛЖНОСТЕЙ:
                try:
                    категории = json.loads(строка['категории'])
                except Exception:
                    категории = []
                if self.тип_сотрудника == "офицер":
                    if "офицер" in категории or "общее" in категории:
                        результат.append((строка['id'], строка['наименование']))
                elif self.тип_сотрудника == "курсант":
                    if "курсант" in категории or "общее" in категории:
                        результат.append((строка['id'], строка['наименование']))
                else:
                    результат.append((строка['id'], строка['наименование']))
            if not результат:
                logger.warning(f"Не найдены должности для типа сотрудника: {self.тип_сотрудника}")
            return результат
        except Exception as e:
            logger.error(f"Ошибка при загрузке должностей: {e}")
            return []

    def _загрузить_должности(self):
        """Загружает должности из справочника и обновляет выпадающий список"""
        self.должности = self._получить_должности_из_справочника()
        
        # Заполняем выпадающий список наименованиями должностей
        значения = [должность[1] for должность in self.должности]
        self['values'] = значения
        
        # Устанавливаем первое значение по умолчанию, если есть значения
        if значения:
            self.current(0)
    
    def _настроить_выпадающий_список(self, event=None):
        """Настраивает выпадающий список, чтобы он отображался без прокрутки"""
        self.update()
        if not self['values']:
            return
            
        # Получаем количество элементов в списке
        количество_элементов = len(self['values'])
        
        # Ограничиваем высоту выпадающего списка до 10 элементов максимум
        # для более удобной навигации при большом количестве элементов
        высота = min(количество_элементов, 10)
        
        # Устанавливаем высоту выпадающего списка
        self.configure(height=высота)

    def _обработать_выбор(self, event=None):
        """Обрабатывает выбор должности из списка"""
        # Можно добавить дополнительную логику при выборе должности
        pass
    
    def get_id(self):
        """Возвращает ID выбранной должности"""
        текущее_значение = self.get()
        for id_должности, наименование in self.должности:
            if наименование == текущее_значение:
                return id_должности
        return None
    
    def set_by_id(self, id_должности):
        """Устанавливает значение по ID должности"""
        for i, (должность_id, наименование) in enumerate(self.должности):
            if должность_id == id_должности:
                self.current(i)
                return True
        return False

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Выбор должности")

    # Создаем экземпляр виджета выбора должности
    виджет_должности = ВиджетДолжности(root, тип_сотрудника="курсант")
    виджет_должности.pack(padx=10, pady=10)

    root.mainloop()